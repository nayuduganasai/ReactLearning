{"ast":null,"code":"import React, { useState, useEffect, useReducer } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\n//The Following code from line 6 to 98 is implementation of the use state and useEffect Hooks and \n//This Can also Achive by using \"useReducer\" Hook That i wrote After the line 98.\n// const Login = (props) => {\n//   const [enteredEmail, setEnteredEmail] = useState('');\n//   const [emailIsValid, setEmailIsValid] = useState();\n//   const [enteredPassword, setEnteredPassword] = useState('');\n//   const [passwordIsValid, setPasswordIsValid] = useState();\n//   const [formIsValid, setFormIsValid] = useState(false);\n\n// useEffect(()=>{\n//   const identifier = setTimeout(() => {\n//     console.log(\"checking form validity\")\n//     setFormIsValid(\n//       enteredEmail.includes('@') && enteredPassword.trim().length > 6\n//     );\n\n//   }, 500); \n\n//   //cleanup function\n//   return ()=>{\n//     console.log(\"cleanup\")\n//     clearTimeout(identifier);\n//   };\n// },[enteredEmail,enteredPassword]);\n\n//   const emailChangeHandler = (event) => {\n//     setEnteredEmail(event.target.value);\n//      // setFormIsValid(\n//     //   event.target.value.trim().length > 6 && enteredEmail.includes('@')\n//     // );\n//   };\n\n//   const passwordChangeHandler = (event) => {\n//     setEnteredPassword(event.target.value);\n\n//     // setFormIsValid(\n//     //   event.target.value.trim().length > 6 && enteredEmail.includes('@')\n//     // );\n//   };\n\n//   const validateEmailHandler = () => {\n//     setEmailIsValid(enteredEmail.includes('@'));\n//   };\n\n//   const validatePasswordHandler = () => {\n//     setPasswordIsValid(enteredPassword.trim().length > 6);\n//   };\n\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n//     props.onLogin(enteredEmail, enteredPassword);\n//   };\n\n//   return (\n//     <Card className={classes.login}>\n//       <form onSubmit={submitHandler}>\n//         <div\n//           className={`${classes.control} ${\n//             emailIsValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"email\">E-Mail</label>\n//           <input\n//             type=\"email\"\n//             id=\"email\"\n//             value={enteredEmail}\n//             onChange={emailChangeHandler}\n//             onBlur={validateEmailHandler}\n//           />\n//         </div>\n//         <div\n//           className={`${classes.control} ${\n//             passwordIsValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"password\">Password</label>\n//           <input\n//             type=\"password\"\n//             id=\"password\"\n//             value={enteredPassword}\n//             onChange={passwordChangeHandler}\n//             onBlur={validatePasswordHandler}\n//           />\n//         </div>\n//         <div className={classes.actions}>\n//           <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n//             Login\n//           </Button>\n//         </div>\n//       </form>\n//     </Card>\n//   );\n// };\n\n//This is a login page using the usereducer hook and use effect\n\n// const emailReducer = (state,action)=>{\n\n//   if(action.type === 'userEntering'){\n\n//     return { val :action.value, isValid: action.value.includes(\"@\")};\n//   }\n//    if(action.type === 'userEntryFinish'){\n\n//     return { val :state.val, isValid: state.val.includes(\"@\")};\n//   }\n//   return{val:'',isValid : false};\n\n// }\n\n// const passwordReducer = (state,action)=>{\n//   // console.log(\"password hitting\")\n//   if(action.type === 'userEntering'){\n//     return { val :action.VALUE, isValid: action.VALUE.trim().length >6};\n//   }\n//    if(action.type === 'userEntryFinish'){\n//     return { val :state.val, isValid: state.val.trim().length >6};\n//   }\n//   return{val:'',isValid : false};\n\n// }\n// const Login = (props) => {\n\n//   //We can combinly Implement the two states with the useReducer Hook let's write here\n//   const[enteredEmail,dispatchEnteredEmail] = useReducer(emailReducer,{val:'',isValid:null})\n//   const [formIsValid, setFormIsValid] = useState(false);\n//   const[enteredPassword,dispatchEnteredPassword] = useReducer(passwordReducer,{ val:'', isValid:null })\n\n//   useEffect(() => {\n//     console.log('EFFECT RUNNING');\n\n//     return () => {\n//       console.log('EFFECT CLEANUP');\n//     };\n//   }, []);\n\n//   const { isValid: emailIsValid } = enteredEmail;\n//   console.log(emailIsValid)\n//   const { isValid: passwordIsValid } = enteredPassword;\n//   console.log(passwordIsValid)\n// useEffect(()=>{\n//   const identifier = setTimeout(() => {\n//     console.log(\"checking form validity\")\n//     setFormIsValid(emailIsValid && passwordIsValid);\n\n//   }, 500); \n\n//   //cleanup function\n//   return ()=>{\n//     console.log(\"cleanup\")\n//     clearTimeout(identifier);\n//   };\n// },[emailIsValid,passwordIsValid]);\n\n//   const emailChangeHandler = (event) => {\n\n//     dispatchEnteredEmail({type:'UserEntering', value : event.target.value})\n//   };\n\n//   const passwordChangeHandler = (event) => {\n\n//     dispatchEnteredPassword({type:'userEntering', VALUE :event.target.value })\n//   };\n\n//   const validateEmailHandler = () => {\n//        console.log(\"hitting\")\n//     dispatchEnteredEmail({type:'UserEntryFinish'})\n//   };\n\n//   const validatePasswordHandler = () => {\n//      dispatchEnteredEmail({type:'UserEntryFinish'})\n//   };\n\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n//     props.onLogin(enteredEmail.val, enteredPassword.val);\n//   };\n\n//   return (\n//     <Card className={classes.login}>\n//       <form onSubmit={submitHandler}>\n//         <div\n//           className={`${classes.control} ${\n//             enteredEmail.isValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"email\">E-Mail</label>\n//           <input\n//             type=\"email\"\n//             id=\"email\"\n//             value={enteredEmail.val}\n//             onChange={emailChangeHandler}\n//             onBlur={validateEmailHandler}\n//           />\n//         </div>\n//         <div\n//           className={`${classes.control} ${\n//             enteredPassword.isValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"password\">Password</label>\n//           <input\n//             type=\"password\"\n//             id=\"password\"\n//             value={enteredPassword.val}\n//             onChange={passwordChangeHandler}\n//             onBlur={validatePasswordHandler}\n//           />\n//         </div>\n//         <div className={classes.actions}>\n//           <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n//             Login\n//           </Button>\n//         </div>\n//       </form>\n//     </Card>\n//   );\n// // };\n// const emailReducer = (state, action) => {\n//   if (action.type === 'USER_INPUT') {\n//     return { value: action.val, isValid: action.val.includes('@') };\n//   }\n//   if (action.type === 'INPUT_BLUR') {\n//     return { value: state.value, isValid: state.value.includes('@') };\n//   }\n//   return { value: '', isValid: false };\n// };\n\n// const passwordReducer = (state, action) => {\n//   if (action.type === 'USER_INPUT') {\n//     return { value: action.val, isValid: action.val.trim().length > 6 };\n//   }\n//   if (action.type === 'INPUT_BLUR') {\n//     return { value: state.value, isValid: state.value.trim().length > 6 };\n//   }\n//   return { value: '', isValid: false };\n// };\n\n// const Login = (props) => {\n//   // const [enteredEmail, setEnteredEmail] = useState('');\n//   // const [emailIsValid, setEmailIsValid] = useState();\n//   // const [enteredPassword, setEnteredPassword] = useState('');\n//   // const [passwordIsValid, setPasswordIsValid] = useState();\n//   const [formIsValid, setFormIsValid] = useState(false);\n\n//   const [emailState, dispatchEmail] = useReducer(emailReducer, {\n//     value: '',\n//     isValid: null,\n//   });\n//   const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n//     value: '',\n//     isValid: null,\n//   });\n\n//   useEffect(() => {\n//     console.log('EFFECT RUNNING');\n\n//     return () => {\n//       console.log('EFFECT CLEANUP');\n//     };\n//   }, []);\n\n//   const { isValid: emailIsValid } = emailState;\n//   const { isValid: passwordIsValid } = passwordState;\n\n//   useEffect(() => {\n//     const identifier = setTimeout(() => {\n//       console.log('Checking form validity!');\n//       setFormIsValid(emailIsValid && passwordIsValid);\n//     }, 500);\n\n//     return () => {\n//       console.log('CLEANUP');\n//       clearTimeout(identifier);\n//     };\n//   }, [emailIsValid, passwordIsValid]);\n\n//   const emailChangeHandler = (event) => {\n//     dispatchEmail({ type: 'USER_INPUT', val: event.target.value });\n\n//     // setFormIsValid(\n//     //   event.target.value.includes('@') && passwordState.isValid\n//     // );\n//   };\n\n//   const passwordChangeHandler = (event) => {\n//     dispatchPassword({ type: 'USER_INPUT', val: event.target.value });\n\n//     // setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n//   };\n\n//   const validateEmailHandler = () => {\n//     dispatchEmail({ type: 'INPUT_BLUR' });\n//   };\n\n//   const validatePasswordHandler = () => {\n//     dispatchPassword({ type: 'INPUT_BLUR' });\n//   };\n\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n//     props.onLogin(emailState.value, passwordState.value);\n//   };\n\n//   return (\n//     <Card className={classes.login}>\n//       <form onSubmit={submitHandler}>\n//         <div\n//           className={`${classes.control} ${\n//             emailState.isValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"email\">E-Mail</label>\n//           <input\n//             type=\"email\"\n//             id=\"email\"\n//             value={emailState.value}\n//             onChange={emailChangeHandler}\n//             onBlur={validateEmailHandler}\n//           />\n//         </div>\n//         <div\n//           className={`${classes.control} ${\n//             passwordState.isValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"password\">Password</label>\n//           <input\n//             type=\"password\"\n//             id=\"password\"\n//             value={passwordState.value}\n//             onChange={passwordChangeHandler}\n//             onBlur={validatePasswordHandler}\n//           />\n//         </div>\n//         <div className={classes.actions}>\n//           <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n//             Login\n//           </Button>\n//         </div>\n//       </form>\n//     </Card>\n//   );\n// };\nexport default Login;","map":{"version":3,"names":["React","useState","useEffect","useReducer","Card","classes","Button","Login"],"sources":["C:/Users/ganas/OneDrive/Documents/ReactLearning/useEffects/src/components/Login/Login.js"],"sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\n//The Following code from line 6 to 98 is implementation of the use state and useEffect Hooks and \n//This Can also Achive by using \"useReducer\" Hook That i wrote After the line 98.\n// const Login = (props) => {\n//   const [enteredEmail, setEnteredEmail] = useState('');\n//   const [emailIsValid, setEmailIsValid] = useState();\n//   const [enteredPassword, setEnteredPassword] = useState('');\n//   const [passwordIsValid, setPasswordIsValid] = useState();\n//   const [formIsValid, setFormIsValid] = useState(false);\n\n// useEffect(()=>{\n//   const identifier = setTimeout(() => {\n//     console.log(\"checking form validity\")\n//     setFormIsValid(\n//       enteredEmail.includes('@') && enteredPassword.trim().length > 6\n//     );\n    \n//   }, 500); \n\n//   //cleanup function\n//   return ()=>{\n//     console.log(\"cleanup\")\n//     clearTimeout(identifier);\n//   };\n// },[enteredEmail,enteredPassword]);\n\n\n//   const emailChangeHandler = (event) => {\n//     setEnteredEmail(event.target.value);\n//      // setFormIsValid(\n//     //   event.target.value.trim().length > 6 && enteredEmail.includes('@')\n//     // );\n//   };\n\n//   const passwordChangeHandler = (event) => {\n//     setEnteredPassword(event.target.value);\n\n//     // setFormIsValid(\n//     //   event.target.value.trim().length > 6 && enteredEmail.includes('@')\n//     // );\n//   };\n\n//   const validateEmailHandler = () => {\n//     setEmailIsValid(enteredEmail.includes('@'));\n//   };\n\n//   const validatePasswordHandler = () => {\n//     setPasswordIsValid(enteredPassword.trim().length > 6);\n//   };\n\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n//     props.onLogin(enteredEmail, enteredPassword);\n//   };\n\n//   return (\n//     <Card className={classes.login}>\n//       <form onSubmit={submitHandler}>\n//         <div\n//           className={`${classes.control} ${\n//             emailIsValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"email\">E-Mail</label>\n//           <input\n//             type=\"email\"\n//             id=\"email\"\n//             value={enteredEmail}\n//             onChange={emailChangeHandler}\n//             onBlur={validateEmailHandler}\n//           />\n//         </div>\n//         <div\n//           className={`${classes.control} ${\n//             passwordIsValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"password\">Password</label>\n//           <input\n//             type=\"password\"\n//             id=\"password\"\n//             value={enteredPassword}\n//             onChange={passwordChangeHandler}\n//             onBlur={validatePasswordHandler}\n//           />\n//         </div>\n//         <div className={classes.actions}>\n//           <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n//             Login\n//           </Button>\n//         </div>\n//       </form>\n//     </Card>\n//   );\n// };\n\n\n//This is a login page using the usereducer hook and use effect\n\n// const emailReducer = (state,action)=>{\n  \n//   if(action.type === 'userEntering'){\n    \n//     return { val :action.value, isValid: action.value.includes(\"@\")};\n//   }\n//    if(action.type === 'userEntryFinish'){\n \n//     return { val :state.val, isValid: state.val.includes(\"@\")};\n//   }\n//   return{val:'',isValid : false};\n\n// }\n\n// const passwordReducer = (state,action)=>{\n//   // console.log(\"password hitting\")\n//   if(action.type === 'userEntering'){\n//     return { val :action.VALUE, isValid: action.VALUE.trim().length >6};\n//   }\n//    if(action.type === 'userEntryFinish'){\n//     return { val :state.val, isValid: state.val.trim().length >6};\n//   }\n//   return{val:'',isValid : false};\n\n// }\n// const Login = (props) => {\n \n//   //We can combinly Implement the two states with the useReducer Hook let's write here\n//   const[enteredEmail,dispatchEnteredEmail] = useReducer(emailReducer,{val:'',isValid:null})\n//   const [formIsValid, setFormIsValid] = useState(false);\n//   const[enteredPassword,dispatchEnteredPassword] = useReducer(passwordReducer,{ val:'', isValid:null })\n\n\n//   useEffect(() => {\n//     console.log('EFFECT RUNNING');\n\n//     return () => {\n//       console.log('EFFECT CLEANUP');\n//     };\n//   }, []);\n\n\n//   const { isValid: emailIsValid } = enteredEmail;\n//   console.log(emailIsValid)\n//   const { isValid: passwordIsValid } = enteredPassword;\n//   console.log(passwordIsValid)\n// useEffect(()=>{\n//   const identifier = setTimeout(() => {\n//     console.log(\"checking form validity\")\n//     setFormIsValid(emailIsValid && passwordIsValid);\n    \n//   }, 500); \n\n//   //cleanup function\n//   return ()=>{\n//     console.log(\"cleanup\")\n//     clearTimeout(identifier);\n//   };\n// },[emailIsValid,passwordIsValid]);\n\n\n//   const emailChangeHandler = (event) => {\n    \n//     dispatchEnteredEmail({type:'UserEntering', value : event.target.value})\n//   };\n\n//   const passwordChangeHandler = (event) => {\n \n//     dispatchEnteredPassword({type:'userEntering', VALUE :event.target.value })\n//   };\n\n//   const validateEmailHandler = () => {\n//        console.log(\"hitting\")\n//     dispatchEnteredEmail({type:'UserEntryFinish'})\n//   };\n\n//   const validatePasswordHandler = () => {\n//      dispatchEnteredEmail({type:'UserEntryFinish'})\n//   };\n\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n//     props.onLogin(enteredEmail.val, enteredPassword.val);\n//   };\n\n//   return (\n//     <Card className={classes.login}>\n//       <form onSubmit={submitHandler}>\n//         <div\n//           className={`${classes.control} ${\n//             enteredEmail.isValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"email\">E-Mail</label>\n//           <input\n//             type=\"email\"\n//             id=\"email\"\n//             value={enteredEmail.val}\n//             onChange={emailChangeHandler}\n//             onBlur={validateEmailHandler}\n//           />\n//         </div>\n//         <div\n//           className={`${classes.control} ${\n//             enteredPassword.isValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"password\">Password</label>\n//           <input\n//             type=\"password\"\n//             id=\"password\"\n//             value={enteredPassword.val}\n//             onChange={passwordChangeHandler}\n//             onBlur={validatePasswordHandler}\n//           />\n//         </div>\n//         <div className={classes.actions}>\n//           <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n//             Login\n//           </Button>\n//         </div>\n//       </form>\n//     </Card>\n//   );\n// // };\n// const emailReducer = (state, action) => {\n//   if (action.type === 'USER_INPUT') {\n//     return { value: action.val, isValid: action.val.includes('@') };\n//   }\n//   if (action.type === 'INPUT_BLUR') {\n//     return { value: state.value, isValid: state.value.includes('@') };\n//   }\n//   return { value: '', isValid: false };\n// };\n\n// const passwordReducer = (state, action) => {\n//   if (action.type === 'USER_INPUT') {\n//     return { value: action.val, isValid: action.val.trim().length > 6 };\n//   }\n//   if (action.type === 'INPUT_BLUR') {\n//     return { value: state.value, isValid: state.value.trim().length > 6 };\n//   }\n//   return { value: '', isValid: false };\n// };\n\n// const Login = (props) => {\n//   // const [enteredEmail, setEnteredEmail] = useState('');\n//   // const [emailIsValid, setEmailIsValid] = useState();\n//   // const [enteredPassword, setEnteredPassword] = useState('');\n//   // const [passwordIsValid, setPasswordIsValid] = useState();\n//   const [formIsValid, setFormIsValid] = useState(false);\n\n//   const [emailState, dispatchEmail] = useReducer(emailReducer, {\n//     value: '',\n//     isValid: null,\n//   });\n//   const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n//     value: '',\n//     isValid: null,\n//   });\n\n//   useEffect(() => {\n//     console.log('EFFECT RUNNING');\n\n//     return () => {\n//       console.log('EFFECT CLEANUP');\n//     };\n//   }, []);\n\n//   const { isValid: emailIsValid } = emailState;\n//   const { isValid: passwordIsValid } = passwordState;\n\n//   useEffect(() => {\n//     const identifier = setTimeout(() => {\n//       console.log('Checking form validity!');\n//       setFormIsValid(emailIsValid && passwordIsValid);\n//     }, 500);\n\n//     return () => {\n//       console.log('CLEANUP');\n//       clearTimeout(identifier);\n//     };\n//   }, [emailIsValid, passwordIsValid]);\n\n//   const emailChangeHandler = (event) => {\n//     dispatchEmail({ type: 'USER_INPUT', val: event.target.value });\n\n//     // setFormIsValid(\n//     //   event.target.value.includes('@') && passwordState.isValid\n//     // );\n//   };\n\n//   const passwordChangeHandler = (event) => {\n//     dispatchPassword({ type: 'USER_INPUT', val: event.target.value });\n\n//     // setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n//   };\n\n//   const validateEmailHandler = () => {\n//     dispatchEmail({ type: 'INPUT_BLUR' });\n//   };\n\n//   const validatePasswordHandler = () => {\n//     dispatchPassword({ type: 'INPUT_BLUR' });\n//   };\n\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n//     props.onLogin(emailState.value, passwordState.value);\n//   };\n\n//   return (\n//     <Card className={classes.login}>\n//       <form onSubmit={submitHandler}>\n//         <div\n//           className={`${classes.control} ${\n//             emailState.isValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"email\">E-Mail</label>\n//           <input\n//             type=\"email\"\n//             id=\"email\"\n//             value={emailState.value}\n//             onChange={emailChangeHandler}\n//             onBlur={validateEmailHandler}\n//           />\n//         </div>\n//         <div\n//           className={`${classes.control} ${\n//             passwordState.isValid === false ? classes.invalid : ''\n//           }`}\n//         >\n//           <label htmlFor=\"password\">Password</label>\n//           <input\n//             type=\"password\"\n//             id=\"password\"\n//             value={passwordState.value}\n//             onChange={passwordChangeHandler}\n//             onBlur={validatePasswordHandler}\n//           />\n//         </div>\n//         <div className={classes.actions}>\n//           <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n//             Login\n//           </Button>\n//         </div>\n//       </form>\n//     </Card>\n//   );\n// };\nexport default Login;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAE9D,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}