{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ganas\\\\OneDrive\\\\Documents\\\\ReactLearning\\\\Forms\\\\src\\\\components\\\\SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const nameInpuRef = useRef();\n  const [entreredName, setEnteredName] = useState('');\n  const [nameIsValid, setNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (nameIsValid) {\n      console.log('Name Input Is Valid!!');\n    }\n  }, [nameIsValid]);\n  const nameInputHandler = event => {\n    setEnteredName(event.target.value);\n  };\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n    if (entreredName.trim() === '') {\n      setNameIsValid(false);\n      return;\n    }\n    const formSubmitHandler = event => {\n      event.preventDefault();\n      setEnteredNameTouched(true);\n      if (entreredName.trim() === '') {\n        setNameIsValid(false);\n        return;\n      }\n      setNameIsValid(true);\n      console.log(entreredName);\n      const enteredValue = nameInpuRef.current.value;\n      console.log(enteredValue);\n      setEnteredName('');\n    };\n    const nameInputIsValid = !nameIsValid && enteredNameTouched;\n    const nameInputClass = nameInputIsValid ? 'form-control invalid' : 'form-control';\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: nameInputClass,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Your Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: nameInpuRef,\n          type: \"text\",\n          id: \"name\",\n          onChange: nameInputHandler,\n          onBlur: nameInputBlurHandler,\n          value: entreredName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this), !nameIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Name field should not be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this);\n  };\n};\n_s(SimpleInput, \"jKtckXAAHg6C818G4n6NYqI3CVc=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useRef","useState","useEffect","jsxDEV","_jsxDEV","SimpleInput","props","_s","nameInpuRef","entreredName","setEnteredName","nameIsValid","setNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","nameInputHandler","event","target","value","nameInputBlurHandler","trim","formSubmitHandler","preventDefault","enteredValue","current","nameInputIsValid","nameInputClass","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","id","onChange","onBlur","_c","$RefreshReg$"],"sources":["C:/Users/ganas/OneDrive/Documents/ReactLearning/Forms/src/components/SimpleInput.js"],"sourcesContent":["import {useRef,useState,useEffect} from 'react';\n\nconst SimpleInput = (props) => {\n\n  const nameInpuRef = useRef();\n  const [entreredName, setEnteredName] = useState('');\n  const [nameIsValid, setNameIsValid] = useState(false);\n  const [enteredNameTouched,setEnteredNameTouched] = useState(false);\n  \n  useEffect(()=>{\n    if(nameIsValid){\n      console.log('Name Input Is Valid!!')\n    }\n  },[nameIsValid])\n\n\n  const nameInputHandler = event=>{\n      setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = event=>{\n     setEnteredNameTouched(true);\n    if(entreredName.trim() ===''){\n        setNameIsValid(false);\n        return;\n\n  }\n\n  const formSubmitHandler = event =>{\n\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    if(entreredName.trim() ===''){\n        setNameIsValid(false);\n        return;\n    }\n     \n    setNameIsValid(true);\n    console.log(entreredName);\n\n    const enteredValue = nameInpuRef.current.value;\n    console.log(enteredValue);\n\n    setEnteredName('');\n  }\n\n  const nameInputIsValid = !nameIsValid && enteredNameTouched;\n\n  const nameInputClass = nameInputIsValid? 'form-control invalid':'form-control';\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClass}>\n        <label htmlFor='name'>Your Name</label>\n        <input ref={nameInpuRef}\n               type='text' \n              id='name' \n              onChange={nameInputHandler}\n              onBlur={nameInputBlurHandler}\n              value={entreredName}/>\n             {!nameIsValid && <p className='error-text'>Name field should not be empty</p>} \n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n}\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}