{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ganas\\\\OneDrive\\\\Documents\\\\ReactLearning\\\\Forms\\\\src\\\\components\\\\SimpleInput.js\",\n  _s = $RefreshSig$();\n// import {useState} from 'react';\n\n// const SimpleInput = (props) => {\n\n// //name realatd state values\n//   const [entreredName, setEnteredName] = useState('');\n//   const [enteredNameTouched,setEnteredNameTouched] = useState(false);\n//   const nameIsValid = entreredName.trim() !== '';\n//   const nameInputIsInvalid = !nameIsValid && enteredNameTouched;\n\n//   // e-mail related state values\n//    const [entreredEmail, setEnteredEmail] = useState('');\n//   const [enteredEmailTouched,setEnteredEmailTouched] = useState(false);\n//   const emailIsValid = entreredEmail.includes('@');\n//   const emailInputIsInvalid = !emailIsValid && enteredEmailTouched;\n\n//   let formIsValid = false;\n\n//   if(nameIsValid && emailIsValid){\n//     formIsValid = true;\n//   }\n\n//   const nameInputHandler = event=>{\n//       setEnteredName(event.target.value);\n//   };\n\n//   const nameInputBlurHandler = event=>{\n//      setEnteredNameTouched(true);\n//   }\n\n//    const emailInputHandler = event=>{\n//       setEnteredEmail(event.target.value);\n//   };\n\n//   const emailInputBlurHandler = event=>{\n//      setEnteredEmailTouched(true);\n//   }\n\n//   const formSubmitHandler = event =>{\n\n//     event.preventDefault();\n//     setEnteredNameTouched(true);\n\n//     if(!nameIsValid || !emailIsValid){\n//         return;\n//     }\n//     console.log(entreredName);\n//     console.log(entreredEmail)\n\n//     setEnteredName('');\n//     setEnteredNameTouched(false);\n\n//     setEnteredEmail('');\n//     setEnteredEmailTouched(false);\n//   }\n//   const nameInputClass = nameInputIsInvalid? 'form-control invalid':'form-control';\n\n//    const emailInputClass = emailInputIsInvalid? 'form-control invalid':'form-control';\n\n//   return (\n//     <form onSubmit={formSubmitHandler}>\n//       <div className={nameInputClass}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input\n//                type='text' \n//               id='name' \n//               onChange={nameInputHandler}\n//               onBlur={nameInputBlurHandler}\n//               value={entreredName}/>\n//              {nameInputIsInvalid && \n//              <p className='error-text'>Name field should not be empty</p>\n//              } \n//       </div>\n//       <div className={emailInputClass}>\n//         <label htmlFor='name'>Your E-mail</label>\n//         <input\n//                type='email' \n//               id='email' \n//               onChange={emailInputHandler}\n//               onBlur={emailInputBlurHandler}\n//               value={entreredEmail}/>\n//              {emailInputIsInvalid && \n//              <p className='error-text'>Eamil field should not be empty & Enter valid mail id</p>\n//              } \n//       </div>\n//       <div className=\"form-actions\">\n//         <button disabled={!formIsValid}>Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// lets write  entire code using custom hook and lets see how it looks\nimport { useState } from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: EmailInputHasError,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.includes('@'));\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    if (!enteredEmailIsValid || !enteredNameIsValid) {\n      return;\n    }\n    console.log(enteredEmail);\n    console.log(enteredName);\n    resetNameInput();\n    resetEmailInput();\n  };\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = enteredEmailIsValid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangedHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your E-Mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailChangedHandler,\n        onBlur: emailBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), EmailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter a valid email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 8\n  }, this);\n};\n_s(SimpleInput, \"T1GtfySy4Gmm1FOMyfx1ST1SJvU=\", false, function () {\n  return [useInput, useInput];\n});\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","jsxDEV","_jsxDEV","SimpleInput","props","_s","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangedHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enteredEmail","enteredEmailIsValid","EmailInputHasError","emailChangedHandler","emailBlurHandler","resetEmailInput","includes","formIsValid","formSubmitHandler","event","preventDefault","console","log","nameInputClasses","emailInputClasses","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","onBlur","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ganas/OneDrive/Documents/ReactLearning/Forms/src/components/SimpleInput.js"],"sourcesContent":["// import {useState} from 'react';\n\n// const SimpleInput = (props) => {\n\n// //name realatd state values\n//   const [entreredName, setEnteredName] = useState('');\n//   const [enteredNameTouched,setEnteredNameTouched] = useState(false);\n//   const nameIsValid = entreredName.trim() !== '';\n//   const nameInputIsInvalid = !nameIsValid && enteredNameTouched;\n\n//   // e-mail related state values\n//    const [entreredEmail, setEnteredEmail] = useState('');\n//   const [enteredEmailTouched,setEnteredEmailTouched] = useState(false);\n//   const emailIsValid = entreredEmail.includes('@');\n//   const emailInputIsInvalid = !emailIsValid && enteredEmailTouched;\n\n\n//   let formIsValid = false;\n\n//   if(nameIsValid && emailIsValid){\n//     formIsValid = true;\n//   }\n\n//   const nameInputHandler = event=>{\n//       setEnteredName(event.target.value);\n//   };\n\n//   const nameInputBlurHandler = event=>{\n//      setEnteredNameTouched(true);\n//   }\n\n//    const emailInputHandler = event=>{\n//       setEnteredEmail(event.target.value);\n//   };\n\n//   const emailInputBlurHandler = event=>{\n//      setEnteredEmailTouched(true);\n//   }\n\n\n\n//   const formSubmitHandler = event =>{\n\n//     event.preventDefault();\n//     setEnteredNameTouched(true);\n\n//     if(!nameIsValid || !emailIsValid){\n//         return;\n//     }\n//     console.log(entreredName);\n//     console.log(entreredEmail)\n\n//     setEnteredName('');\n//     setEnteredNameTouched(false);\n\n//     setEnteredEmail('');\n//     setEnteredEmailTouched(false);\n//   }\n//   const nameInputClass = nameInputIsInvalid? 'form-control invalid':'form-control';\n\n//    const emailInputClass = emailInputIsInvalid? 'form-control invalid':'form-control';\n\n//   return (\n//     <form onSubmit={formSubmitHandler}>\n//       <div className={nameInputClass}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input\n//                type='text' \n//               id='name' \n//               onChange={nameInputHandler}\n//               onBlur={nameInputBlurHandler}\n//               value={entreredName}/>\n//              {nameInputIsInvalid && \n//              <p className='error-text'>Name field should not be empty</p>\n//              } \n//       </div>\n//       <div className={emailInputClass}>\n//         <label htmlFor='name'>Your E-mail</label>\n//         <input\n//                type='email' \n//               id='email' \n//               onChange={emailInputHandler}\n//               onBlur={emailInputBlurHandler}\n//               value={entreredEmail}/>\n//              {emailInputIsInvalid && \n//              <p className='error-text'>Eamil field should not be empty & Enter valid mail id</p>\n//              } \n//       </div>\n//       <div className=\"form-actions\">\n//         <button disabled={!formIsValid}>Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n\n// lets write  entire code using custom hook and lets see how it looks\nimport { useState } from \"react\";\nimport useInput from \"../hooks/useInput\";\n\nconst SimpleInput = (props)=>{\n   const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n\n   const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: EmailInputHasError,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.includes('@'));\n\n  let formIsValid = false;\n  if(enteredNameIsValid && enteredEmailIsValid){\n    formIsValid = true;\n  }\n\n  const formSubmitHandler = (event)=>{\n    \n    event.preventDefault();\n\n    if(!enteredEmailIsValid || !enteredNameIsValid){\n      return;\n    }\n\n    console.log(enteredEmail);\n    console.log(enteredName);\n\n    resetNameInput();\n    resetEmailInput();\n  }\n const nameInputClasses = nameInputHasError\n    ? 'form-control invalid'\n    : 'form-control';\n\n  const emailInputClasses = enteredEmailIsValid\n    ? 'form-control invalid'\n    : 'form-control';\n\n    return(\n\n       <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          type='text'\n          id='name'\n          onChange={nameChangedHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className='error-text'>Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your E-Mail</label>\n        <input\n          type='email'\n          id='email'\n          onChange={emailChangedHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {EmailInputHasError && (\n          <p className='error-text'>Please enter a valid email.</p>\n        )}\n      </div>\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n\n    )\n\n}\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}